trigger:
  - main
  - develop
pr:
  - main
  - develop


pool:
  name: Cloud-bcz-pub

variables:
  CI: 'true'
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  ${{ if eq(variables.isMain, 'true') }}:
    TARGET_ENV: e4 # deploy master to test environment
  ${{ elseif eq(variables.isDevelop, 'true') }}:
    TARGET_ENV: e1 # deploy develop to e1 environment
  ${{ else }}:
    TARGET_ENV: e1 # set default TARGET_ENV to e1
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(System.PullRequest.PullRequestNumber)
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: main
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    NX_BRANCH: $(Build.SourceBranchName)
    BASE_SHA: main~1
  HEAD_SHA: $(git rev-parse HEAD)

stages:
  - template: .azure-pipelines/steps/azure-pipelines-build.yml

  - stage: deploy
    dependsOn: build
    condition: and(succeeded(), or(eq(variables.isMain, 'true'), eq(variables.isDevelop, 'true')))
    jobs:
    - deployment: DeploySchema
      displayName: deploy Schema
      environment: ${{ variables.TARGET_ENV }}
      strategy:
        runOnce:
          deploy:
            steps:
            - script: df -h
              displayName: 'Check disk size'

            - task: DownloadPipelineArtifact@2
              inputs:
                source: 'current'
                path: $(System.DefaultWorkingDirectory)/artifacts

            - template: .azure-pipelines/steps/install-node-modules.yml

            - bash:
                curl -fsSL https://get.pulumi.com | sh -s -- --version 3.60.0
              displayName: 'Install pulumi'

            - bash: |
                # exit if a command returns a non-zero exit code and also print the commands and their args as they are executed
                set -e -x

                export PATH="$PATH:/home/AzDevOps/.pulumi/bin"

                pulumi plugin install resource aws v5.23.0
                pulumi plugin install resource synced-folder v0.0.9

                cd infrastructure && npm install
              displayName: 'Setup pulumi'

            - task: AWSShellScript@1
              displayName: Deploy
              env:
                ENV: ${{ variables.TARGET_ENV }}
              inputs:
                awsCredentials: 'aws-dvp-nonprod'
                regionName: 'ap-southeast-2'
                scriptType: 'inline'
                inlineScript: |
                  export PATH="$PATH:/home/AzDevOps/.pulumi/bin"
                  make pulumi-up
