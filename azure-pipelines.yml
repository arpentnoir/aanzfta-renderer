trigger:
  batch: true
  paths: # File paths to include or exclude for triggering a run.
    exclude:
      - "docs/*"

variables:
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

stages:
  - stage: build_test
    pool:
      vmImage: ubuntu-latest
    variables:
      disable.coverage.autogenerate: true
    jobs:
      - job: sonarqube
        steps:
          - task: SonarQubePrepare@5
            inputs:
              SonarQube: "sonarqube-sandbox"
              scannerMode: "CLI"
              configMode: "manual"
              cliProjectKey: $(Build.Repository.Name)
              cliProjectName: $(Build.Repository.Name)
              cliSources: "."
          - task: SonarQubeAnalyze@5
          - task: SonarQubePublish@5

      - job: build_test
        steps:
          - task: NodeTool@0
            displayName: Set Node Version
            inputs:
              versionSpec: 14.x

          - bash: |
              make install
            displayName: Install deps

          - bash: |
              make lint
            displayName: Run linting

          - bash: |
              make unit-test
            displayName: Run unit tests

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/junit.xml"
              failTaskOnFailedTests: true
            displayName: Publish test results to AzDo

          - publish: $(System.DefaultWorkingDirectory)/apps/coverage/cobertura-coverage.xml
            artifact: coverage

      # - job: publish_code_coverage
      #   dependsOn:
      #     - build_test
      #   steps:
      #     - task: DownloadPipelineArtifact@2
      #       inputs:
      #         artifact: coverage
      #         patterns: "**/cobertura-coverage.xml"
      #         path: $(System.DefaultWorkingDirectory)/CoverageResults/apps

      #     - task: reportgenerator@5
      #       inputs:
      #         reports: "**/cobertura-coverage.xml"
      #         reporttypes: "HtmlInline_AzurePipelines;Cobertura"
      #         targetdir: "$(System.DefaultWorkingDirectory)/Coverage"

      #     - task: PublishCodeCoverageResults@1
      #       inputs:
      #         codeCoverageTool: "Cobertura"
      #         summaryFileLocation: "$(System.DefaultWorkingDirectory)/Coverage/Cobertura.xml"
      #         reportDirectory: "$(System.DefaultWorkingDirectory)/Coverage"
      #         failTaskOnFailedTests: true
      #       displayName: Publish code coverage results to AzDo

  # - stage: deploy
  #   dependsOn: build_test
  #   condition: and(succeeded(), eq(variables.isMain, 'true'))
  #   pool:
  #     vmImage: ubuntu-latest
  #   jobs:
  #     - job: deploy
  #       steps:
  #         - task: AzureKeyVault@2
  #           inputs:
  #             connectedServiceName: "gs-ha-dvp-serviceconnection"
  #             keyVaultName: "gs-ha-dvp"
  #             secretsFilter: "*"
  #             runAsPreJob: true

  #         - task: DownloadPipelineArtifact@2
  #           inputs:
  #             source: "current" # Options: current, specific
  #             path: $(System.DefaultWorkingDirectory)/artifacts

  #         - task: NodeTool@0
  #           displayName: Set Node Version
  #           inputs:
  #             versionSpec: 14.x

  #         - bash: |
  #             # exit if a command returns a non-zero exit code and also print the commands and their args as they are executed
  #             set -e -x

  #             # Download and install required tools pulumi
  #             rm -rf $HOME/.pulumi
  #             rm -rf /usr/local/bin/pulumi*
  #             curl -fsSL https://get.pulumi.com | sh -s -- --version 3.30.0
  #             /bin/cp -rf $HOME/.pulumi/bin/* /usr/local/bin

  #             cd infrastructure && npm install
  #           displayName: Install pulumi

  #         - bash: |
  #             make pulumi-preview
  #           displayName: Run `pulumi preview`
  #           env:
  #             AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
  #             AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)

  #         - bash: |
  #             make pulumi-up
  #           displayName: Run `pulumi up`
  #           env:
  #             AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
  #             AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)
