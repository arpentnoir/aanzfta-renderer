trigger:
  - main
  - develop
pr:
  - main
  - develop

parameters:
  - name: ENV
    displayName: Deployment environment
    default: default
    values:
      - default
      - dev
      - test
      - preprod

variables:
  CI: "true"
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
  isDevelop: $[eq(variables['Build.SourceBranch'], 'refs/heads/develop')]
  isPR: $[eq(variables['Build.Reason'], 'PullRequest')]
  ${{ if eq(variables.isMain, 'true') }}:
    TARGET_ENV: test # deploy master to test environment
  ${{ elseif eq(variables.isDevelop, 'true') }}:
    TARGET_ENV: dev # deploy develop to dev environment
  ${{ elseif ne(parameters.ENV, 'default')}}:
    TARGET_ENV: ${{ parameters.ENV }} # ENV parameter overrides TARGET_ENV if set
  ${{ else }}:
    TARGET_ENV: dev # set default TARGET_ENV to dev
  ${{ if eq(variables['Build.Reason'], 'PullRequest') }}:
    TARGET_BRANCH: $[replace(variables['System.PullRequest.TargetBranch'],'refs/heads/','origin/')]
    BASE_SHA: main
  ${{ if ne(variables['Build.Reason'], 'PullRequest') }}:
    BASE_SHA: main~1
  HEAD_SHA: $(git rev-parse HEAD)

stages:
  - stage: build_test
    pool:
      vmImage: ubuntu-latest
    variables:
      disable.coverage.autogenerate: true
    jobs:
      - job: build_test
        steps:
          - checkout: self
            fetchDepth: 2
            displayName: Checkout

          - task: NodeTool@0
            displayName: Set Node Version
            inputs:
              versionSpec: 14.x

          - bash: |
              make install
            displayName: Install deps

          - bash: |
              make lint
            displayName: Run linting

          - bash: |
              make unit-test
            displayName: Run unit tests

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "**/junit.xml"
              failTaskOnFailedTests: true
            displayName: Publish test results to AzDo

          - task: reportgenerator@5
            inputs:
              reports: "**/cobertura-coverage.xml"
              reporttypes: "HtmlInline_AzurePipelines;Cobertura"
              targetdir: "$(System.DefaultWorkingDirectory)/Coverage"
            displayName: "Generate code coverage results"

          - task: PublishCodeCoverageResults@1
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(System.DefaultWorkingDirectory)/Coverage/Cobertura.xml"
              reportDirectory: "$(System.DefaultWorkingDirectory)/Coverage"
              failTaskOnFailedTests: true
            displayName: Publish code coverage results to AzDo

          - bash: |
              make build
            displayName: Build build

          - task: PublishPipelineArtifact@1
            condition: and(succeeded(), or(eq(variables.isMain, 'true'), eq(variables.isDevelop, 'true')))
            inputs:
              targetPath: $(System.DefaultWorkingDirectory)/apps/dist
              artifactName: "distributed-renderer-build"

  - stage: deploy
    dependsOn: build_test
    condition: and(succeeded(), or(eq(variables.isMain, 'true'), eq(variables.isDevelop, 'true')))
    pool:
      vmImage: ubuntu-latest
    jobs:
      - job: deploy
        steps:
          - script: |
              echo "Deployment environment: ${{variables.TARGET_ENV}}"

          - task: AzureKeyVault@2
            inputs:
              connectedServiceName: "gs-ha-dvp-serviceconnection"
              keyVaultName: "gs-ha-dvp"
              secretsFilter: "*"
              runAsPreJob: true

          - task: DownloadPipelineArtifact@2
            inputs:
              source: "current" # Options: current, specific
              path: $(System.DefaultWorkingDirectory)/artifacts

          - task: NodeTool@0
            displayName: Set Node Version
            inputs:
              versionSpec: 14.x

          - bash: |
              # exit if a command returns a non-zero exit code and also print the commands and their args as they are executed
              set -e -x

              # Download and install required tools pulumi
              rm -rf $HOME/.pulumi
              rm -rf /usr/local/bin/pulumi*
              curl -fsSL https://get.pulumi.com | sh -s -- --version 3.30.0
              /bin/cp -rf $HOME/.pulumi/bin/* /usr/local/bin

              cd infrastructure && npm install
            displayName: Install pulumi

          - bash: |
              make pulumi-preview
            displayName: Run `pulumi preview`
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)

          - bash: |
              make pulumi-up
            displayName: Run `pulumi up`
            env:
              AWS_ACCESS_KEY_ID: $(AWS-ACCESS-KEY-ID)
              AWS_SECRET_ACCESS_KEY: $(aws-secret-access-key)
